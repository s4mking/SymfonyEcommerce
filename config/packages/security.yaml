security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    # providers:
    #     in_memory: { memory: ~ }
    # firewalls:
    #     dev:
    #         pattern: ^/(_(profiler|wdt)|css|images|js)/
    #         security: false
    #     main:
    #         anonymous: true

    #         # activate different ways to authenticate

    #         # http_basic: true
    #         # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

    #         # form_login: true
    #         # https://symfony.com/doc/current/security/form_login_setup.html

    # # Easy way to control access for large sections of your site
    # # Note: Only the *first* access control that matches will be used
    # access_control:
    #     # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
    # encoders:
    #     FOS\UserBundle\Model\UserInterface: bcrypt
    encoders:
        Aimeos\ShopBundle\Entity\FosUser: bcrypt
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: ROLE_ADMIN

    providers:
        aimeos:
            entity: { class: AimeosShopBundle:FosUser, property: username }
        # fos_userbundle:
        #     id: fos_user.user_provider.username

    # firewalls:
    #     main:
    #         pattern: ^/
    #         form_login:
    #             provider: fos_userbundle
    #             csrf_token_generator: security.csrf.token_manager
    #             # if you are using Symfony < 2.8, use the following config instead:
    #             # csrf_provider: form.csrf_provider

    #         logout:       true
    #         anonymous:    true
    firewalls:
        aimeos_admin:
            pattern:   ^/admin
            anonymous: ~
            provider: aimeos
            logout_on_user_change: true
            form_login:
                login_path: /admin
                check_path: /admin_check
        aimeos_myaccount:
            pattern: ^/
            form_login:
                provider: aimeos
                csrf_token_generator: security.csrf.token_manager
            logout:       true
            anonymous:    true
    access_control:
        - { path: ^/login$, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, role: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/resetting, role: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/admin/, role: ROLE_ADMIN }
        - { path: ^/myaccount, roles: ROLE_USER }
        - { path: ^/admin/.+, roles: [ROLE_ADMIN, ROLE_SUPER_ADMIN] }